<?php

namespace garazol\addBodyClass\components;

use Yii;
use yii\base\Behavior;
use yii\base\InvalidConfigException;
use yii\helpers\Inflector;

/**
 * Class BodyClassBehavior
 *
 * @package backend\components\behaviors
 */
class BodyClassBehavior extends Behavior
{
    /**
     * camel case class style
     */
    const CLASS_STYLE_CAMEL_CASE = 'camelCase';

    /**
     * hyphen separated class style
     */
    const CLASS_STYLE_HYPHEN = 'hyphen';

    /**
     * @var array automatically generates these kind of classes
     */
    public $autoGeneratedClassTypes = [
        'userLoggedIn',
        'controllerAction',
        'module',
    ];

    /**
     * @var string classes how should be formatted
     */
    public $classStyle = self::CLASS_STYLE_HYPHEN;

    /**
     * @var array stores class names to body
     */
    private $bodyClasses = [];

    /**
     * @inheritdoc
     */
    public function init()
    {
        parent::init();
        $this->autoGenerateClasses();
    }

    /**
     * Renders body classes to string
     *
     * @return string
     */
    public function renderBodyClasses()
    {
        $this->bodyClasses = array_unique($this->bodyClasses);
        $this->formatClasses();

        return implode(' ', $this->bodyClasses);
    }

    /**
     * Add body class(es)
     *
     * @param string|array $class
     *
     * @return $this
     */
    public function addBodyClass($class)
    {
        foreach ((array) $class as $value) {
            $this->bodyClasses[] = $value;
        }
        $this->bodyClasses = array_unique($this->bodyClasses);

        return $this;
    }

    /**
     * Remove class(es) from body classes
     *
     * @param string|array $class
     *
     * @return $this
     */
    public function removeBodyClass($class)
    {
        $this->bodyClasses = array_diff($this->bodyClasses, is_array($class) ? $class : [$class]);

        return $this;
    }

    /**
     * Formats classes according to expected class style
     */
    protected function formatClasses()
    {
        switch ($this->classStyle) {
            case self::CLASS_STYLE_CAMEL_CASE: {
                foreach ($this->bodyClasses as &$item) {
                    $item = Inflector::variablize($item);
                }
            }
            break;
        }
    }

    /**
     * Automatically generates default classes
     *
     * @throws InvalidConfigException
     */
    protected function autoGenerateClasses()
    {
        foreach ($this->autoGeneratedClassTypes as $autoGeneratedClassType) {
            $method = 'autoGenerate' . ucwords($autoGeneratedClassType);
            if (is_callable([$this, $method])) {
                $class = $this->{$method}();
                if (!empty($class)) {
                    $this->addBodyClass($class);
                }
            } else {
                throw new InvalidConfigException('Unknown auto generator method.');
            }
        }
    }

    /**
     * Generates class based on user logged in status
     *
     * @return string
     */
    protected function autoGenerateUserLoggedIn()
    {
        return 'user-logged-' . (Yii::$app->getUser()->getIsGuest() ? 'out' : 'in');
    }

    /**
     * Generates class based on the current controller and action
     *
     * @return string
     */
    protected function autoGenerateControllerAction()
    {
        return [
            'controller-' . Inflector::slug(Yii::$app->controller->id),
            'action-' . Inflector::slug(Yii::$app->controller->action->id),
        ];
    }

    /**
     * Generates class based on the current module
     *
     * @return string
     */
    protected function autoGenerateModule()
    {
        return 'module-' . Inflector::slug(Yii::$app->controller->module->id);
    }
}